@page "/"
@inject HttpClient Http
@inject IJSRuntime JS
<PageTitle>Convert Kwanza BNA</PageTitle>


<RadzenCard>
    @if (status == StatusEnum.Finalizado)
    {
        <div class="row mb-3">
            <div class="col-12 d-md-flex align-items-center">
                <h1 class="m-0 h3">Convert Kwanza BNA <small class="text-muted d-block">Actualizado em @dataActualizacao</small></h1>
                <RadzenButton Click=@(async args => await OnClick()) Class="btn btn-success ml-md-3 mt-md-0 mt-3"><RadzenIcon Icon="cached" /> Actualizar</RadzenButton>
            </div>
        </div>

        <div class="row">

            <div class="col-md-6 col-lg-4 col-xl-3 p-3">
                <RadzenLabel Text="Selecione o banco" Component="dpBanco" />
                <RadzenDropDown Name="dpBanco" AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Class="form-control"
                            Placeholder="Selecione..." Data="@bancos" Change="@OnChangeBanco" />
            </div>

            <div class="col-md-6 col-lg-4 col-xl-3 p-3">
                <RadzenLabel Text="Taxa %" Component="taxa" />
                <RadzenNumeric Name="taxa" TValue="decimal" Format="0.00" @bind-Value=@model.Taxa Class="mr-1 form-control" Change="@OnTaxa" />
            </div>

        </div>

        <div class="row">
            <div class="col-md-6 col-lg-4 col-xl-3 p-3">
                <RadzenLabel Text="Valor em KZ" Component="valorKwanza" />
                <RadzenNumeric TValue="decimal" Name="valorKwanza" Format="#,#0.00" Change="@OnKwanza" @bind-Value=@model.kwanza Class="mr-1 form-control" />
            </div>

            <div class="col-md-6 col-lg-4 col-xl-3 p-3">
                <RadzenLabel Text="Valor em Euro" Component="valorEuro" />
                <RadzenNumeric Name="valorEuro" TValue="decimal" Format="#,#0.00" Change="@OnEuro" @bind-Value=@model.Euro Class="mr-1 form-control" />
            </div>
        </div>

        <div class="row">
            <div class="12 border-bottom pt-2 pb-2">
                <p class="d-flex align-items-center"><strong class="mr-1">Valor do EURO:</strong> <span class="badge bg-success">@model.kwanzaEuro KZ</span></p>
            </div>

            <div class="12 border-bottom pt-2 pb-2">
                <p class="d-flex align-items-center"><strong class="mr-1">Valor do EURO com taxas:</strong> <span class="badge bg-primary">@model.kwanzaEuroTaxa KZ</span></p>
            </div>

            @if (valorCalculado.Length > 0)
            {
                <div class="12 pt-2">
                    <p><strong>Valor Calculado em:</strong> @valorCalculado</p>
                </div>
            }
        </div>
    }
    else if (status == StatusEnum.Carregando)
    {
        <div class="row">
            <div class="col-12">
                <span class="alert alert-primary">Processando...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <span class="alert alert-danger">Erro ao carregar os dados: @msg</span>
            </div>
        </div>
    }
</RadzenCard>



@code {

    IEnumerable<string> bancos;
    string banco = string.Empty;
    string valorCalculado = string.Empty;
    Eurokwanza model = new Eurokwanza();
    StatusEnum status = StatusEnum.Finalizado;
    string dataActualizacao = string.Empty;
    string msg = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        status = StatusEnum.Carregando;
        try
        {
            await CarregarDados();
            status = StatusEnum.Finalizado;
        }
        catch (Exception ex)
        {
            status = StatusEnum.Error;
            msg = ex.Message;
        }

    }

    async Task CarregarDados()
    {
        await CarregarTaxa();
        await BuscarInformacaoBNA();
        await CarregarListaBancos();
        await CarregarDataAtaulizacao();
    }

    async Task CarregarDataAtaulizacao()
    {
        try
        {
            var str = await JS.InvokeAsync<string>("ObterDataActualizacao");
            if (str?.Length > 0)
                dataActualizacao = str;
        }
        catch (Exception ex)
        {
            msg += " linha 129 - " + ex.Message;
            throw ex;

        }
    }

    async Task CarregarTaxa()
    {
        try
        {
            var strValue = await JS.InvokeAsync<string>("getItem", "taxa");
            if (!(strValue?.Length > 0)) return;
            model.Taxa = decimal.Parse(strValue);
        }
        catch (Exception ex)
        {
            msg += " linha 145 - " + ex.Message;
            throw ex;

        }

    }

    async Task BuscarInformacaoBNA()
    {
        try
        {
            var dados = await Http.GetFromJsonAsync<BNA[]>(Settings.UrlBna);

            if (dados?.Length > 0)
            {
                Console.WriteLine("invoke js");
                await JS.InvokeVoidAsync("SetDomHtml", dados[0].Taxas);
            }
        }
        catch (Exception ex)
        {
            msg += " linha 169 - " + ex.Message;
            throw ex;
        }
    }

    async Task CarregarListaBancos()
    {
        try
        {
            var strBancos = await JS.InvokeAsync<string>("ObterListaDeBancos");

            if (!(strBancos?.Length > 0)) return;

            bancos = strBancos.Split(";");
        }
        catch (Exception ex)
        {
            msg += " linha 186 - " + ex.Message;
            throw ex;
        }
    }

    async Task OnTaxa(decimal value)
    {
        try
        {
            var str = value.ToString();
            await JS.InvokeVoidAsync("setItem", "taxa", str);
        }
        catch (Exception ex)
        {
            msg += " linha 200 - " + ex.Message;
            throw ex;
        }
    }

    async Task OnKwanza(decimal value)
    {
        if (model.kwanzaEuro == 0) return;

        model.kwanza = value;

        if (value == 0) return;

        model.Euro = model.kwanza / model.kwanzaEuroTaxa;

        if (model.Taxa == 0) return;

        valorCalculado = $"{(Math.Round(model.kwanza / model.kwanzaEuroTaxa, 2)).ToString("#,#0.00")} Euro.";


    }


    async Task OnEuro(decimal value)
    {
        if (model.kwanzaEuro == 0) return;
        model.Euro = value;
        if (value == 0) return;

        model.kwanza = model.Euro * model.kwanzaEuro;

        if (model.Taxa == 0) return;

        valorCalculado = $"{(Math.Round(model.Euro * model.kwanzaEuroTaxa, 2)).ToString("#,#0.00")} Kz.";

    }
    async Task OnChangeBanco(object value)
    {

        if (value == null) return;

        if (((string)value).Length == 0) return;

        try
        {
            var taxa = await JS.InvokeAsync<string>("ObterValorDoEuro", value.ToString());

            model.kwanzaEuro = decimal.Parse(taxa.Replace(",", "."), CultureInfo.InvariantCulture);
        }
        catch (Exception ex)
        {
            msg += " linha 251 - " + ex.Message;
            throw ex;

        }
    }

    async Task OnClick()
    {
        status = StatusEnum.Carregando;
        try
        {
            await CarregarDados();
            status = StatusEnum.Finalizado;
        }
        catch
        {
            status = StatusEnum.Error;
        }
        await InvokeAsync(StateHasChanged);
        Console.WriteLine("Atualizado...");
    }
  }